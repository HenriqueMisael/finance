{"version":3,"sources":["serviceWorker.js","store/core/duck.js","store/core/index.js","store/index.js","themes/colors.js","themes/index.js","screens/home/index.jsx","App.jsx","index.jsx"],"names":["Boolean","window","location","hostname","match","initialState","Object","freeze","username","createActions","coreClear","Types","Creators","reducers","createReducer","defaultypes","DEFAULT","identity","CORE_CLEAR","rootSagas","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","all","createStore","combineReducers","core","applyMiddleware","run","createTheme","name","background","button","text","positive","colors","negative","font","weight","medium","dark","default","primary","secondary","accent","active","disabled","light","themes","HomeScreen","AppRoot","styled","div","backgroundColor","App","useState","selectedTheme","theme","exact","path","component","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gFCfAC,EAAeC,OAAOC,OAAO,CACjCC,SAAU,K,EAKuBC,wBAAc,CAC/CC,UAAW,KADEC,E,EAAAA,MCPA,G,EDOOC,SCPP,CACbC,SDUaC,wBAAcT,GAAD,mBACzBU,QAAYC,QAAUC,KADG,cAEzBN,EAAMO,YARK,iCAAYb,MAME,M,WEHlBc,GAJJC,EAAiBC,cAEjBC,EAAmBrB,OAAOsB,sCAAwCC,IAExE,SAAUL,IAAV,iEACE,OADF,SACQM,YAAI,IADZ,uCAIeC,kBACbC,YAAgB,CAAEC,KAAMA,EAAKf,WAC7BS,EAAiBO,YAAgBT,KAGnCA,EAAeU,IAAIX,G,4CCnBJ,EAEL,UAFK,EAGJ,UAHI,EAIJ,UAJI,EAKJ,UALI,EAMJ,UANI,EAOJ,UAPI,EAQJ,UARI,EASJ,UATI,EAUH,UAVG,EAWL,UAXK,EAeE,UAfF,EAiBE,UCLjB,SAASY,EAAYC,EAAMC,EAAYC,EAAQC,GAC7C,MAAO,CACLH,OACAC,aACAC,SACAC,KAAK,eAAMA,EAAP,CAAaC,SAAUC,EAAiBC,SAAUD,IACtDE,KAAM,CACJC,OAAQ,CACNC,OAAQ,OAMhB,IAAMC,EAAOX,EACX,OACA,CACEY,QD5BK,UC6BLC,QAASP,EACTQ,UAAWR,EACXS,OAAQT,GAEV,CACEO,QAAS,CACPX,WDtBO,UCuBPc,ODxBO,UCyBPZ,KAAME,GAERW,SAAU,CACRb,KAAME,EACNJ,WAAYI,IAGhB,CACEO,QAASP,EACTQ,UAAWR,IAITY,EAAQlB,EACZ,QACA,CACEY,QAASN,EACTO,QAASP,EACTQ,UAAWR,EACXS,OAAQT,GAEV,CACEO,QAAS,CACPX,WAAYI,EACZU,OAAQV,EACRF,KAAME,GAERW,SAAU,CACRb,KAAME,EACNJ,WAAYI,IAGhB,CAAEO,QAASP,EAAgBQ,UAAWR,IAUzBa,EAPA,CACbR,OACAO,SCnEaE,MANf,WACE,OACE,+B,oICGJ,IAAMC,EAAUC,IAAOC,IAAV,KACS,qBAAGC,mBAsBVC,MAjBf,WAAgB,IAAD,EACWC,mBAAS,QAA1BC,EADM,oBAEPC,EAAQT,EAAOQ,GAErB,OACE,kBAAC,IAAD,CAAeC,MAAOA,GACpB,kBAACP,EAAD,CAASG,gBAAiBI,EAAM1B,WAAWU,SACzC,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,IAAIC,UAAWX,S,OCX7CY,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,OAEFC,SAASC,eAAe,SRoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.be74cd94.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createActions, createReducer, Types as defaultypes } from 'reduxsauce';\nimport { identity } from 'lodash-es';\n\nconst initialState = Object.freeze({\n  username: '',\n});\n\nconst clear = () => ({ ...initialState });\n\nexport const { Types, Creators } = createActions({\n  coreClear: [],\n});\n\nexport default createReducer(initialState, {\n  [defaultypes.DEFAULT]: identity,\n  [Types.CORE_CLEAR]: clear,\n});\n","import Reducers from './duck';\n\nexport default {\n  reducers: Reducers,\n};\n","import { all } from 'redux-saga/effects';\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport core from './core';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nfunction* rootSagas() {\n  yield all([]);\n}\n\nexport default createStore(\n  combineReducers({ core: core.reducers }),\n  composeEnhancers(applyMiddleware(sagaMiddleware)),\n);\n\nsagaMiddleware.run(rootSagas);\n","export default {\n  black: '#000000',\n  grey50: '#FAFAFA',\n  grey100: '#F5F5F5',\n  grey200: '#EEEEEE',\n  grey300: '#E0E0E0',\n  grey400: '#BDBDBD',\n  grey700: '#616161',\n  grey800: '#424242',\n  grey900: '#212121',\n  green700: '#388E3C',\n  red700: '#d32f2f',\n  purple700: '#7b1fa2',\n  purple800: '#6a1b9a',\n  purple900: '#4A148C',\n  deepPurple500: '#673ab7',\n  deepPurple600: '#5e35b1',\n  deepPurple700: '#512da8',\n};\n","import colors from './colors';\n\n/**\n * @typedef {Object} Theme\n * @property {{}} background\n * @property {{}} button\n * @property {{}} text\n */\n\n/**\n * @returns {Theme}\n */\nfunction createTheme(name, background, button, text) {\n  return {\n    name,\n    background,\n    button,\n    text: { ...text, positive: colors.green700, negative: colors.red700 },\n    font: {\n      weight: {\n        medium: 500,\n      },\n    },\n  };\n}\n\nconst dark = createTheme(\n  'dark',\n  {\n    default: colors.black,\n    primary: colors.grey900,\n    secondary: colors.grey800,\n    accent: colors.grey700,\n  },\n  {\n    primary: {\n      background: colors.purple900,\n      active: colors.purple800,\n      text: colors.grey50,\n    },\n    disabled: {\n      text: colors.grey400,\n      background: colors.grey700,\n    },\n  },\n  {\n    primary: colors.grey50,\n    secondary: colors.grey200,\n  },\n);\n\nconst light = createTheme(\n  'light',\n  {\n    default: colors.grey50,\n    primary: colors.grey200,\n    secondary: colors.grey100,\n    accent: colors.grey300,\n  },\n  {\n    primary: {\n      background: colors.deepPurple500,\n      active: colors.deepPurple700,\n      text: colors.grey50,\n    },\n    disabled: {\n      text: colors.grey700,\n      background: colors.grey400,\n    },\n  },\n  { primary: colors.grey900, secondary: colors.grey800 },\n);\n\nconst themes = {\n  dark,\n  light,\n};\n\nexport const themeList = [dark, light];\n\nexport default themes;\n","import React from 'react';\n\nfunction HomeScreen() {\n  return (\n    <div />\n  );\n}\n\nexport default HomeScreen;\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport styled, { ThemeProvider } from 'styled-components';\n\nimport themes from './themes';\nimport HomeScreen from './screens/home';\n\nconst AppRoot = styled.div`\n  background-color: ${({ backgroundColor }) => backgroundColor};\n  width: 100vw;\n  height: 100vh;\n`;\n\nfunction App() {\n  const [selectedTheme] = useState('dark');\n  const theme = themes[selectedTheme];\n\n  return (\n    <ThemeProvider theme={theme}>\n      <AppRoot backgroundColor={theme.background.default}>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={HomeScreen} />\n          </Switch>\n        </Router>\n      </AppRoot>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport '@csstools/normalize.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}